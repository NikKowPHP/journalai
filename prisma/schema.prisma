generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id
  email                 String    @unique
  supabaseAuthId        String    @unique
  nativeLanguage        String?   // Used for contextual translation
  targetLanguage        String?
  writingStyle          String?
  writingPurpose        String?
  selfAssessedLevel     String?
  aiAssessedProficiency Float     @default(2.0)
  proficiencySubScores  Json?
  status                String    @default("ACTIVE") // e.g., ACTIVE, DELETION_PENDING
  lastUsageReset        DateTime? // Timestamp for resetting daily limits
  onboardingCompleted   Boolean   @default(false)

  // Monetization
  stripeCustomerId   String?   @unique
  subscriptionTier   String    @default("FREE")
  subscriptionStatus String?

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  topics         Topic[]
  journalEntries JournalEntry[]
  srsItems       SrsReviewItem[]
}

model Topic {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title          String
  isMastered     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  journalEntries JournalEntry[]

  @@unique([userId, title])
}

model JournalEntry {
  id        String   @id @default(cuid())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  topicId   String
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  analysis  Analysis?
}

model Analysis {
  id            String    @id @default(cuid())
  entryId       String    @unique
  entry         JournalEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  grammarScore  Int
  phrasingScore Int
  vocabScore    Int
  feedbackJson  Json
  rawAiResponse Json
  createdAt     DateTime  @default(now())
  mistakes      Mistake[]
}

model Mistake {
  id            String         @id @default(cuid())
  analysisId    String
  analysis      Analysis       @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  type          String
  originalText  String
  correctedText String
  explanation   String
  createdAt     DateTime       @default(now())
  srsReviewItem SrsReviewItem?
}

model SrsReviewItem {
  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type           String
  frontContent   String
  backContent    String
  context        String?
  mistakeId      String?   @unique
  mistake        Mistake?  @relation(fields: [mistakeId], references: [id], onDelete: Cascade)
  nextReviewAt   DateTime
  lastReviewedAt DateTime?
  interval       Int       @default(1)
  easeFactor     Float     @default(2.5)
  createdAt      DateTime  @default(now())
}

model ProcessedWebhook {
  id          String   @id @default(cuid())
  eventId     String   @unique
  type        String
  processedAt DateTime @default(now())
  createdAt   DateTime @default(now())
}

model SystemSetting {
  key       String   @id
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}